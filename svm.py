# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AKXGwNLRXqJJDXDR1gmnbqNPYhxrcDSS

## Implimentation Support Vector Machine(SVM)---Type 1

# 1. Introduction to SVM

Used SVM to build and train a model using human cell records, and classify cells to whether the samples are benign (mild state) or malignant (evil state).

SVM works by mapping data to a high-dimensional feature space so that data points can be categorized, even when the data are not otherwise linearly separable (This gets done by kernel function of SVM classifier). A separator between the categories is found, then the data is transformed in such a way that the separator could be drawn as a hyperplane.
"""

#Necessary imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
#load data from csv file
df=pd.read_csv('/content/drive/MyDrive/cell_samples.csv')
df.tail()#first 5 rows
df.shape
df.size
df.count()
df['Class'].value_counts()
df.tail()#first 5 rows

#Distribution of classes
benign_df=df[df['Class']==2][0:200]
malignant_df=df[df['Class']==4][0:200]

axes=benign_df.plot(kind='scatter',x='Clump',y='UnifSize',color='blue',label='Benign')
malignant_df.plot(kind='scatter',x='Clump',y='UnifSize',color='red',label='Benign',ax=axes)
# help(benign_df.plot)

#Identifying unwanted rows
df.dtypes

df=df[pd.to_numeric(df['BareNuc'],errors='coerce').notnull()]
df['BareNuc']=df['BareNuc'].astype('int')
df.dtypes

#To remove unwanted columns
df.columns
feature_df=df[['Clump', 'UnifSize', 'UnifShape', 'MargAdh', 'SingEpiSize',
              'BareNuc', 'BlandChrom', 'NormNucl', 'Mit']]

X=np.array(feature_df)
y=np.array(df['Class'])

X[0:5]
y[0:5]

#divide the data into train and test
#df(100)--->Train(80 rows)/test(20rows)

#Train(X,y) ## X itself is a 2D array,## y is 1D
#Test(X,y)
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=4)
#546*9
X_train.shape
y_train.shape
X_test.shape#137 *9
y_test.shape #137*1

#Modelling
from sklearn import svm
'''
*4 type of kernels
    1.linear
    2.polynomial
    3.RBF(Radial basis fun)
    4.sigmoid
'''

classifier=svm.SVC(kernel='linear',gamma='auto',C=2)
classifier.fit(X_train,y_train)
y_predict=classifier.predict(X_test)

#Evaluation of results
from sklearn.metrics import classification_report
print(classification_report(y_test,y_predict))

"""## SVM Type 2"""

import pandas as pd
from sklearn.datasets import load_iris
iris = load_iris()
df = pd.DataFrame(iris.data,columns=iris.feature_names)
df.head()

df['target'] = iris.target
df.head()

from sklearn.model_selection import train_test_split
X = df.drop(['target'], axis='columns')
y = df.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=10)
from sklearn.svm import SVC
model = SVC()
model.fit(X_train, y_train)

model.score(X_test, y_test)