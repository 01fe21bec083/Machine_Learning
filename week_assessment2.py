# -*- coding: utf-8 -*-
"""Week_Assessment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s5qPJkxWsLFFMpFp48t_nxiM6889GHj1



"""## Weekly Assessment 2"""

#4)
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load the data from the file
data = pd.read_fwf('/content/drive/MyDrive/StudentsMarks.txt')

# Extract the 'Roll_NO' and 'Marks' columns as numpy arrays
x = data['Roll_NO'].values.reshape((-1, 1))
y = data['Marks'].values.reshape((-1,1))

# Calculate the means
x_mean = np.mean(x)
y_mean = np.mean(y)

# Calculate the coefficients W1 and W0
m = len(x)
num = 0
den = 0

for i in range(m):
    num += (x[i] - x_mean) * (y[i] - y_mean)
    den += (x[i] - x_mean) ** 2

W1 = num / den
W0 = y_mean - (W1 * x_mean)

# Make predictions using manual calculation
pred1 = W0 + W1 * x

# Use scikit-learn's LinearRegression
from sklearn.linear_model import LinearRegression

LR = LinearRegression()
LR.fit(x, y)
pred2 = LR.predict(x)

# Print the predictions
print("Manual Calculation:")
print(pred1)
print("\nScikit-Learn LinearRegression:")
print(pred2)

# Plotting
plt.scatter(x, y, color='red', marker='o', label="Datapoints")
plt.plot(x, pred1, color='yellow', marker='*', label="Manual Linear Regression")
plt.plot(x, pred2, color='blue', marker='x', label="Scikit-Learn Linear Regression")
plt.xlabel("Roll number")
plt.ylabel("Marks")
plt.title("Students Marks")
plt.legend()
plt.show()

#1
def fun1(num):
  if num%3==0:
    print("Humpty")
  elif num%5==0:
    print("Dumpty")
  elif num%3==0 and num%5==0:
    print("Humpty_Dumpty")
  else:
    print(num)
n=int(input("Enter the number"))
fun1(n)

#2
def multiple(lim):
  sum=0
  for i in range(lim+1):
    if i%3==0 or i%5==0:
       sum+=i
  return sum

lim=int(input("Enter the limit"))
multiple(lim)

#3
import numpy as np

# Define matrices a and b
a = np.empty((3, 2))
b = np.empty((2, 3))

# Input values for matrix a
print("Enter values for matrix a (3x2):")
for i in range(3):
    for j in range(2):
        x = int(input())
        a[i][j] = x

# Input values for matrix b
print("Enter values for matrix b (2x3):")
for i in range(2):
    for j in range(3):
        y = int(input())
        b[i][j] = y

# Initialize matrix c with zeros
c = np.zeros((3, 3))

# Perform matrix multiplication
for i in range(3):
    for j in range(3):
        sum = 0
        for k in range(2):
            sum += a[i][k] * b[k][j]
        c[i][j] = sum

print("Matrix a:")
print(a)
print("Matrix b:")
print(b)
print("Result of matrix multiplication (c):")
print(c)